import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix,classification_report,accuracy_score,r2_score
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.cluster import KMeans
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error,mean_absolute_error
from sklearn.metrics import zero_one_loss
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import KFold,StratifiedKFold,LeaveOneOut
import statistics as st
df = pd.read_csv(r'C:\Users\shrav\Dropbox\My PC (DESKTOP-689769P)\Downloads\train_u6lujuX_CVtuZ9i (1).csv')
print(df.head())

#statistics
print(df.describe())
print(df.info)
print(df.shape)
print(df.dtypes)

#cleaning and filtering
print(df.fillna(0))
print(df.dropna)
print(df.replace('No',''))
print(df.isnull().sum())

#counting
print(df.values)
print(df['Dependents'].value_counts())
print(df['Married'].value_counts())
print(df.replace({'Married':{'Yes':'Die'}},inplace=True))
print(df['Married'].value_counts())

plotting graph
print(sns.countplot(data= df,x = 'Education',hue = 'Loan_Status'))
plt.show()
print(sns.countplot(data=df,x = 'Married',hue='Loan_Status'))
plt.show()

plt.figure(figsize=(15,6))

sns.heatmap(df.corr(),annot = True)
plt.show()

x = df.iloc[:,:-1]
y = df.iloc[:,-1]

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.33,random_state=42)

def gen_cls_matrix(y_test,ypred):
cm = confusion_matrix(y_test,ypred)
cl = classification_report(y_test,ypred)
print(cm)
print(cl)
def score(model):
print('training score',model.score(x_train,y_train))
print('testing score',model.score(x_test,y_test))

m1 = LinearRegression()
m1.fit(x_train,y_train)
score(m1)
df_predict = m1.predict(x_test)
gen_cls_matrix(y_test,df_predict)
